@{
    ViewData["Title"] = "Receipt Manager";
}




<main>
    <div class="bg-white article container col-lg-6 offset-lg-3 pl-0 pr-0">



        <div class="top_andro m-0 pl-0 pr-0">


            <div class="backProject  col-lg-10 offset-lg-1"><a class="backBG p-1 pr-2" href="/Projects"><img src="/Images/arrow.png" width="20" height="20" class="d-inline-block" alt=""><i class="">back to project selection</i></a></div>

            <h1 class="projects d-flex justify-content-center pb-0 mb-0 mt-3"><b class="shadow-sm  titleTop pl-2 pr-2">Receipt Manager</b></h1>
            <div class="under d-flex justify-content-center mt-0 "><strong class="title pl-2 pr-2 shadow-sm  ">Android || Google API</strong></div>

        </div>

        <div class="pt-5 col-lg-10 offset-lg-1">


            @{
                string timeSpan = "";
                int days = (int)ViewData["days"];
                if (days == 0) timeSpan = "today";
                if (days == 1) timeSpan = "yesterday";
                else if (days > 0 && days < 30) timeSpan = days.ToString() + " days ago";
                else if (days >= 30)
                {
                    int fullMonths = (days - (days % 30)) / 30;
                    if (fullMonths == 1) timeSpan = fullMonths.ToString() + " month ago";
                    else timeSpan = fullMonths.ToString() + " months ago";
                }
            }

            @{
                string timeSpanBE = "";
                int daysBE = (int)ViewData["daysBE"];
                if (daysBE == 0) timeSpanBE = "today";
                if (daysBE == 1) timeSpanBE = "yesterday";
                else if (daysBE > 0 && daysBE < 30) timeSpanBE = daysBE.ToString() + " days ago";
                else if (daysBE >= 30)
                {
                    int fullMonthsBE = (daysBE - (daysBE % 30)) / 30;
                    if (fullMonthsBE == 1) timeSpanBE = fullMonthsBE.ToString() + " month ago";
                    else timeSpanBE = fullMonthsBE.ToString() + " months ago";
                }
            }




            <div class="d-flex justify-content-start">
                <img src="/Images/icons/dt.png" width="20" height="20" class="d-inline-block mr-1 " alt="">Repositories: <a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp"> Android app</a>, <a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/ReceiptifyServer"> Server logic</a> 
            </div>

            <div class="d-flex justify-content-start">
                <img src="/Images/icons/calendar.png" width="20" height="20" class="d-inline-block mr-1 " alt="">Last update: <a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp/commits/master"> @timeSpan</a>, <a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/ReceiptifyServer/commits/master"> @timeSpanBE</a> 
            </div>

            <div class="d-flex justify-content-start">
                <img src="/Images/icons/ppl.png" width="20" height="20" class="d-inline-block mr-1 " alt="">Developer(s): <a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz"> Zachariasz Jankowski</a>
            </div>



            <hr>






            <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('1')"><h4 class="mb-0">Introduction</h4> <h4 id="i1" class="mb-0 ml-auto mr-2">+</h4> </div>
            <div id="t1" class="par mb-2">
                <div class="p-2">
                    <p class="p-2">
                            I am developing this project as a university assignment. Although it's a group effort, I only present code that I wrote myself (see github commits). The last section explains in more detail how we collaborate in our team. 
                            Our goal is to create an Android app that will be able to:
                            <ul>
                            <li>scan shopping receipts (by reading their text with OCR and extracting relevant information with our algorithms</li>
                            <li>store all data in the database</li>
                            <li>enable users to create accounts that are secure and facilitate backing up their data</li>
                            <li>create interesting and useful statistics based on the user data</li>
                            </ul>
                    </p>
                </div>
            </div>

            <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('2')"><h4 class="mb-0">Project Structure</h4> <h4 id="i2" class="mb-0 ml-auto mr-2">+</h4> </div>
            <div id="t2" class="par mb-2">
                <div class="p-2">
                        <p class="p-2">
                        This project consists of two parts: the actual app and the server logic, which supports data backup and other functionalities. You can find links to both repositories at the top of this page.
                        The app is still in an early stage of its development, but I managed to develop the following functionalities:
                        </p>
                        <ul>
                            <li><a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp/blob/master/app/src/main/java/com/receiptify/DataSyncService.java">DataSyncService.java</a> - service for syncing data with the server. It uses the "Retrofit" library to handle API calls.</li>
                            <li><a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp/blob/master/app/src/main/java/com/receiptify/activities/ReceiptsView.java">ReceiptsView.java</a> - recycler view for displaying receipts</li>
                            <li><a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp/blob/master/app/src/main/java/com/receiptify/activities/AddReceipt.java">AddReceipt.java</a> - CloudVision integration for OCR (heavily inspired by Google's example)</li>
                            <li><a class="pl-1" target="_blank" href="https://github.com/JankowskiZachariasz/AndroidApp/tree/master/app/src/main/java/com/receiptify/data">data</a> - package for the local Room database</li>
                        </ul>
                        <a target="_blank" href="\Images\projects\diagram.png"><img src="\Images\projects\diagram.png" class="dontexceed d-inline-block mr-1 " alt=""></a>  
                        <p class="p-2">
                        The back-end is a simple RESTful API developed with .NET Core. While developing it, I used <a class="pl-1" target="_blank" href="https://jasonwatmore.com/post/2019/10/14/aspnet-core-3-simple-api-for-authentication-registration-and-user-management">this</a> project from Jason Watmore's blog to learn how to implement a token-based authentication.  Once a user is logged in, they can manage their data using GET, POST, PUT, UPDATE, and DELETE Http requests. This time I decided not to use the migration-based database because I knew I would change its schema multiple times.
                        </p>
                </div>
            </div>

            

            <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('3')"><h4 class="mb-0">Databases</h4> <h4 id="i3" class="mb-0 ml-auto mr-2">+</h4> </div>
            <div id="t3" class="par mb-2">
                
                <div class="p-2">
                    <p class="p-2">
                        The databases for both front-end and back-end have undergone many changes, and this is the current ER diagram for front-end:
                    </p>
                <a target="_blank" href="\Images\projects\AndroDB.png"><img src="\Images\projects\AndroDB.png" class="dontexceed d-inline-block mr-1 " alt=""></a>  
                    <p class="p-2">
                            <ul>
                            <li>The database on the server contains the additional "owner" column in each table and the table of users for authentication. </li>
                            <li>The SERVER_ID helps keep both databases consistent.</li>
                            <li>We are currently planning to add a table for amended data (edited or deleted) to make the app propagate any changes to the server before synchronization.</li>
                            </ul>
                        
                    </p>
                    
                </div>
            </div>

            <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('4')"><h4 class="mb-0">Syncing Data</h4> <h4 id="i4" class="mb-0 ml-auto mr-2">+</h4> </div>
            <div id="t4" class="par mb-2">
                <div class="p-2">
                     <p class="p-2">
                        Let's see how data is exchanged between the client and server by analyzing the following example:
                        </p>
                        <p class="p-2">
While adding a new receipt, the user needs to choose one of the supported companies. For that reason, our application should pull an up-to-date list of companies from the server. A method from DataSyncService.java does exactly that. 
                        </p>                
<pre><code class="lang-java ml-3 mr-3">
    private synchronized void syncCompanies(){

        while(token==null)login();
        JsonArray companies_server = Companies_server();
        for(int i=0;i < companies_server.size();i++){
            Companies c = new Companies(companies_server.get(i).getAsJsonObject().get("id").getAsString(),companies_server.get(i).getAsJsonObject().get("name").getAsString());
            dBreference.insert(c);
        }


        Toast.makeText(this,"Finished loading companies!",Toast.LENGTH_LONG).show();
    }

    private synchronized JsonArray Companies_server(){
        JsonArray companies =null;
        try {
            companies = service.getCompanies(token).execute().body();
        }catch (Exception e){e.printStackTrace();}

        return companies;
    }
</code></pre>
                        <p class="p-2">
                            It first makes sure that a valid token is present and authenticates with the server if it's not. It uses methods from the Retrofit interface to achieve that communication.
                        </p>
<pre><code class="lang-java ml-3 mr-3">
    private interface RESTfulServer {


        &#64POST("users/register")
        Call< JsonObject> register(&#64Body JsonObject locationPost);

        &#64POST("users/authenticate")
        Call< JsonObject> authenticate(&#64Body JsonObject locationPost);

        &#64GET("companies")
        Call< JsonArray> getCompanies(&#64Header("Authorization") String authHeader);

        &#64GET("users/{id}")
        Call< JsonObject> getUsers(&#64Path("id") int groupId, &#64Header("Authorization") String authHeader);

        &#64PUT("users/{id}")
        Call< JsonObject> setUsers(&#64Path("id") int groupId, &#64Header("Authorization") String authHeader, &#64Body JsonObject updated);


    }
</code></pre>
<p class="p-2">
The Server responds, sending a JSON file with all the supported companies.
</p>
<pre><code class="lang-cs ml-3 mr-3">
 [HttpGet]
        public IActionResult Get()
        {
            IEnumerable< Companies > companies = _companies.GetAll();
            JsonResult a = new JsonResult(companies);
            return Ok(a);
        }
</code></pre>
                </div>

            </div>

            <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('5')"><h4 class="mb-0">Team Work</h4> <h4 id="i5" class="mb-0 ml-auto mr-2">+</h4> </div>
            <div id="t5" class="par mb-2">
                <div class="p-2">
                        <p class="p-2" >
                        We develop this app in a group of 3 developers. On 4th February, we finished our first sprint. The two colleagues of mine are less familiar with Android development, so we have an opportunity to learn good agile practices by coding together. We meet every week to discuss current challenges and exchange our experiences and newly acquired skills. Good communication allows us even to work simultaneously on the same files and to merge them later without issues. We use GitHub to combine our code, Trello to manage sprints, and Slack to discuss various details. Our group is the best example of how politeness can boost any collaboration among programmers (as researched and published in <a href="https://www.researchgate.net/publication/271384912_Would_you_mind_fixing_this_issue_An_Empirical_Analysis_of_Politeness_and_Attractiveness_in_Software_Developed_Using_Agile_Boards" target="_blank">this paper</a> by one of our lecturers).
                         </p>  
              </div>
            </div>




        </div>




    </div>

    <div class="d-flex justify-content-center bg-white  col-lg-6 offset-lg-3 ">
        <partial name="footer" />
    </div>
</main>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="~/js/folding.js"></script>
<script>
    toggle('1');
</script>

