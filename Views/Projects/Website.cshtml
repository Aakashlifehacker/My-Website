@{
    ViewData["Title"] = "Home Page";
}



    
    <main>
        <div class="bg-white article container col-lg-6 offset-lg-3 pl-0 pr-0">



            <div class="top_web m-0 pl-0 pr-0">


                <div class="backProject  col-lg-10 offset-lg-1"><a class="backBG p-1 pr-2" href="/Projects"><img src="/Images/arrow.png" width="20" height="20" class="d-inline-block" alt=""><i class="">back to project selection</i></a></div>

                <h1 class="projects d-flex justify-content-center pb-0 mb-0 mt-3"><b class="shadow-sm  titleTop pl-2 pr-2">This Website</b></h1>
                <div class="under d-flex justify-content-center mt-0 "><strong class="title pl-2 pr-2 shadow-sm  ">ASP.NET  ||  Bootstrap  ||  Javascript</strong></div>

            </div>

            <div class="pt-5 col-lg-10 offset-lg-1">


                @{
                    string timeSpan="";
                    int days = (int)ViewData["days"];
                    if(days==0)timeSpan="today";
                    if(days==1)timeSpan="yesterday";
                    else if(days>0&&days<30)timeSpan=days.ToString()+" days ago";
                    else if(days>=30){
                        int fullMonths=days%30;
                        if(fullMonths==1) timeSpan=fullMonths.ToString()+" month ago";
                        else timeSpan=fullMonths.ToString()+" months ago";
                    }
                }




                <div class="d-flex justify-content-start">
                    <img src="/Images/icons/dt.png" width="20" height="20" class="d-inline-block mr-1 " alt=""><i><b>Repository: </b><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski"> Link</a></i>
                </div>

                <div class="d-flex justify-content-start">
                    <img src="/Images/icons/calendar.png" width="20" height="20" class="d-inline-block mr-1 " alt=""><i><b>Last update: </b><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/commits/master"> @timeSpan</a></i>
                </div>

                <div class="d-flex justify-content-start">
                    <img src="/Images/icons/ppl.png" width="20" height="20" class="d-inline-block mr-1 " alt=""><i><b>Developer(s):</b> [1] <a target="_blank" href="https://github.com/JankowskiZachariasz">Zachariasz Jankowski</a></i>
                </div>



                <hr>






                <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('1')"><h4 class="mb-0">Introduction</h4> <h4 id="i1" class="mb-0 ml-auto mr-2">+</h4> </div>
                <div id="t1" class="par mb-2">
                    <div class="p-2">
                        <p class="p-2">
                            This website is a .NET Core MVC application. I chose the .NET Core over the full .NET framework because it's lighter, doesn't require Visual Studio, and runs on Linux machines. At the same time, it provides all the functionalities that I need.  The server-side logic is written in C#, and the client-side part consists of HTML, CSS, and javascript.
                        </p>
                        <p class="p-2">
                            The single feature that I found the most challenging to implement was the dynamic post loading in the feed section. The server-side logic doesn't load any new posts from the server unless the user has scrolled near the page bottom. The posts can be liked, which created a need for authentication and a well-designed database. This is the first web project that I ever completed.
                        </p>
                    </div>
                </div>


                    <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('2')"><h4 class="mb-0">Project Structure</h4> <h4 id="i2" class="mb-0 ml-auto mr-2">+</h4> </div>
                    <div id="t2" class="par mb-2">
                        <div class="p-2">



                            <p class=" p-2 ">This project was generated and built with the <a target="_blank" href="https://computersciencebypolishguy.blogspot.com/2020/01/mvc-design-pattern.html"> MVC design pattern</a> in mind. Hence, it has a very straightforward structure that I will briefly introduce in this section. </p>
                            <a target="_blank" href="\Images\projects\Project_Structure.png"><img src="\Images\projects\Project_Structure.png" width="100%" class="d-inline-block mr-1 " alt=""></a>
                            <p class="p-2">Following are some essential project files that I've been working on:</p>
                            <p class="pl-4 "><b>Controllers</b> - their code is executed in response to incoming client requests. There is a separate Controller for every section of this website.</p>
                            <ul>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Controllers/FeedController.cs">FeedController.cs</a> <i class="codeComment"> <- Sends posts to the client</i></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Controllers/ProjectsController.cs">ProjectsController.cs</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Controllers/AboutMeController.cs">AboutMeController.cs</a></li>

                            </ul>
                            <p class="pl-4 "><b>Models</b> - Based on their structure, the Entity Framework generates tables in MySQL databases. Furthermore, they come in handy while accessing or modifying the existing data.</p>
                            <ul>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Models/Like.cs">Like.cs</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Models/Posts.cs">Posts.cs</a></li>


                            </ul>
                            <p class="pl-4 "><b>Views </b>are the actual documents in the form of cshtml files that are sent to a client. They contain some C# code that gets processed by RazorPages on the server-side.   </p>
                            <ul>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Views/Shared/_Layout.cshtml">_Layout.cshtml</a><i class="codeComment"> <- Parts that are common for all the sections </i> </li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Views/Feed/Index.cshtml">Feed/Index.cshtml.cs</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Views/AboutMe/Index.cshtml">AboutMe/Index.schtml</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Views/Projects/Index.cshtml">Projects/Index.schtml</a></li>


                            </ul>
                            <p class="pl-4 "><b>Scripts</b> - client-side javascript code.</p>
                            <ul>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/Filler.js">Filler.js</a><i class="codeComment"> <- pulls posts from the server </i></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/like.js">like.js</a><i class="codeComment"> <- processes like & dislike actions </i></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/copy.js">copy.js</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/filter.js">filter.js</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/folding.js">folding.js</a></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/projects.js">projects.js</a></li>

                            </ul>
                        </div>
                    </div>


                    <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('3')"><h4 class="mb-0">Dynamic Post Loading</h4> <h4 id="i3" class="mb-0 ml-auto mr-2">+</h4> </div>
                    <div id="t3" class="par mb-2">
                        <div class="p-2">
                            <p class=" p-2 ">
                                Posts in the feed section are not a part of the HTML document that gets sent to a client. Instead, filler.js requests them from the server when necessary.
                                The server's response is a JSON file that contains all the data that the client needs to build a new post.
                            </p>
                            <p class="pl-4 ">Files responsible for these actions: </p>
                            <ul>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Controllers/FeedController.cs">FeedController.cs</a><i class="codeComment"> <- server-side logic (see the Json(int id) method) </i></li>
                                <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/wwwroot/js/Filler.js">Filler.js</a><i class="codeComment"> <- client-side logic </i></li>

                            </ul>
                            <p class="p-2">The structure of a JSON file is the same as the structure of <a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Models/Posts.cs">Posts.cs</a> class and thus the same as a row in the database table.</p>
                            <p class="p-2">
                                One of the issues I encountered was the asynchronous nature of the $getJSON() function, which would result in the nondeterministic order of posts (some of them would load and get appended to the document faster than others).
                                To fix this, I decided to create empty "div" tags that wait for their assigned posts to load.
                            </p>



<pre><code class="lang-js ml-3 mr-3">
    var wrapper = $('.posts');
    var items = wrapper.children();

    //keeping the number of divs bigger by 5 than the number of posts
    if (items.length < data.ol + 5)
        for (var i = 0; i < ((data.ol + 5) - items.length); i++) {
            wrapper.append($("<" + "div class='container" + divs++ + " col-lg-12'><" + "div />"));
        }

    //appending to the predefined div
    $(doc).appendTo(".container" + data.ol);
</code></pre>


                        </div>
                    </div>


                    <div class="sect  p-1 pl-2 rounded d-flex d-inline-block" onclick="toggle('4')"><h4 class="mb-0">Database</h4> <h4 id="i4" class="mb-0 ml-auto mr-2">+</h4> </div>
                    <div id="t4" class="par mb-2">
                        <div class="p-2">
                             <p class=" p-2 ">
                        My project uses two local MySQL databases that have been created by Entity Framework based on two DbContexts:
                    </p>

                    <ul>
                        <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Data/DataDbContext.cs">DataDbContext.cs</a><i class="codeComment"> <- posts, likes, etc. </i></li>
                        <li><a target="_blank" href="https://github.com/JankowskiZachariasz/Zachariasz-Jankowski/blob/master/Data/ApplicationDbContext.cs">ApplicationDbContext.cs</a><i class="codeComment"> <- used by Miscrosoft.Identity for passwords, usernames and personal data </i></li>
                    </ul>

                    <p class=" p-2 ">
                        I was using the code-first approach - hence there was almost no need for writing any SQL queries. Following is the thought process that led me to create the database in its current form:
                    </p>
                    <ol>
                        <li>I need to store data about posts and users who liked them. However, each post can be liked by multiple users, and each user can like multiple posts. This results in a many-to-many relationship, which is impossible to implement. </li>
                        <a target="_blank" href="\Images\projects\ED1.png"><img src="\Images\projects\ED1.png" class="dontexceed d-inline-block mr-1 " alt=""></a>
                        <li>Following the Entity-Relationship guidelines, I decided to add a third table with a composite primary key to resolve the conflict.</li>
                        <a target="_blank" href="\Images\projects\ED2.png"><img src="\Images\projects\ED2.png" class="dontexceed d-inline-block mr-1 " alt=""></a>
                        <li>I added these tables to my database by creating two new models, adding them to the DbContext, and finally adding a new migration.</li>
                        
                    </ol>

                    </div>
                        </div>
                    </div>

                


        </div>
        
        <div class="d-flex justify-content-center bg-white  col-lg-6 offset-lg-3 ">
            <partial name="footer" />
            </div>
    </main>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="~/js/folding.js"></script>
<script>
    toggle('1');
</script>

